// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ioModules.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const getAllIoModules = `-- name: getAllIoModules :many
SELECT 
	io.id,
	iomt.module_type_name,
	iomt.module_type_number,
	io.manufacturer_bottom_qr_code,
	io.manufacturer_top_qr_code,
	io.rma_number,
	io.order_id,
	iohw.hw_version,
	orders.invoice_number,
	customers."name",
	conts.controllers_id,
	conts.slot_number as "controller slot number",
	iomt.pinout_json
FROM 
	io_modules io
LEFT join io_module_types iomt ON iomt.id = io.io_module_types_id
LEFT join io_module_hw_versions iohw ON iohw.id = io.io_module_hw_versions_id
LEFT join orders on orders.id = io.order_id
LEFT join customers ON customers.id = orders.customers_id
LEFT join controller_slot conts ON conts.io_modules_id = io.id
`

type getAllIoModulesRow struct {
	ID                       uuid.UUID             `json:"id"`
	ModuleTypeName           sql.NullString        `json:"module_type_name"`
	ModuleTypeNumber         sql.NullInt32         `json:"module_type_number"`
	ManufacturerBottomQrCode sql.NullString        `json:"manufacturer_bottom_qr_code"`
	ManufacturerTopQrCode    sql.NullString        `json:"manufacturer_top_qr_code"`
	RmaNumber                sql.NullString        `json:"rma_number"`
	OrderID                  uuid.NullUUID         `json:"order_id"`
	HwVersion                sql.NullInt32         `json:"hw_version"`
	InvoiceNumber            sql.NullString        `json:"invoice_number"`
	Name                     sql.NullString        `json:"name"`
	ControllersID            uuid.NullUUID         `json:"controllers_id"`
	ControllerSlotNumber     sql.NullInt32         `json:"controller slot number"`
	PinoutJson               pqtype.NullRawMessage `json:"pinout_json"`
}

func (q *Queries) getAllIoModules(ctx context.Context) ([]getAllIoModulesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllIoModules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getAllIoModulesRow
	for rows.Next() {
		var i getAllIoModulesRow
		if err := rows.Scan(
			&i.ID,
			&i.ModuleTypeName,
			&i.ModuleTypeNumber,
			&i.ManufacturerBottomQrCode,
			&i.ManufacturerTopQrCode,
			&i.RmaNumber,
			&i.OrderID,
			&i.HwVersion,
			&i.InvoiceNumber,
			&i.Name,
			&i.ControllersID,
			&i.ControllerSlotNumber,
			&i.PinoutJson,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIoModuleById = `-- name: getIoModuleById :one
SELECT 
	io.id,
	iomt.module_type_name,
	iomt.module_type_number,
	io.manufacturer_bottom_qr_code,
	io.manufacturer_top_qr_code,
	io.rma_number,
	io.order_id,
	iohw.hw_version,
	orders.invoice_number,
	customers."name",
	conts.controllers_id,
	conts.slot_number as "controller slot number",
	iomt.pinout_json
FROM 
	io_modules io
LEFT join io_module_types iomt ON iomt.id = io.io_module_types_id
LEFT join io_module_hw_versions iohw ON iohw.id = io.io_module_hw_versions_id
LEFT join orders on orders.id = io.order_id
LEFT join customers ON customers.id = orders.customers_id
LEFT join controller_slot conts ON conts.io_modules_id = io.id
WHERE io.id = $1
`

type getIoModuleByIdRow struct {
	ID                       uuid.UUID             `json:"id"`
	ModuleTypeName           sql.NullString        `json:"module_type_name"`
	ModuleTypeNumber         sql.NullInt32         `json:"module_type_number"`
	ManufacturerBottomQrCode sql.NullString        `json:"manufacturer_bottom_qr_code"`
	ManufacturerTopQrCode    sql.NullString        `json:"manufacturer_top_qr_code"`
	RmaNumber                sql.NullString        `json:"rma_number"`
	OrderID                  uuid.NullUUID         `json:"order_id"`
	HwVersion                sql.NullInt32         `json:"hw_version"`
	InvoiceNumber            sql.NullString        `json:"invoice_number"`
	Name                     sql.NullString        `json:"name"`
	ControllersID            uuid.NullUUID         `json:"controllers_id"`
	ControllerSlotNumber     sql.NullInt32         `json:"controller slot number"`
	PinoutJson               pqtype.NullRawMessage `json:"pinout_json"`
}

func (q *Queries) getIoModuleById(ctx context.Context, id uuid.UUID) (getIoModuleByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getIoModuleById, id)
	var i getIoModuleByIdRow
	err := row.Scan(
		&i.ID,
		&i.ModuleTypeName,
		&i.ModuleTypeNumber,
		&i.ManufacturerBottomQrCode,
		&i.ManufacturerTopQrCode,
		&i.RmaNumber,
		&i.OrderID,
		&i.HwVersion,
		&i.InvoiceNumber,
		&i.Name,
		&i.ControllersID,
		&i.ControllerSlotNumber,
		&i.PinoutJson,
	)
	return i, err
}
