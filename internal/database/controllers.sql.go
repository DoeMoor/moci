// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: controllers.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const getAllControllers = `-- name: GetAllControllers :many
SELECT
  c.id,
  ct.name AS controller_type_name,
  ct.io_module_slot_amount AS io_module_socket_amount,
  p.name AS project_name,
  c.description,
  concat(
    pcbv.version_number,
    pcbrev.revision
  ) AS pcb_hw_version,
  c.pcb_version_number,
  c.serial_number,
  m.name AS manufacturer_name,
  c.assembly_date,
  c.mac_address,
  c.sim_number,
  mpt.name AS mini_pcie_modules_name,
  mpcie.serial_number AS mini_pcie_serial_number,
  m2t.name AS m2_module_name,
  m2t.module_type_number AS m2_module_type_number,
  c.display_adapters_id,
  c.article_number,
  c.qr_code,
  ctc.can_1,
  ctc.can_2,
  ctc.can_3,
  ctc.can_4,
  c.usb,
  c.serial,
  c.manufacturer_qr_code,
  c.order_id,
  c.created_at,
  c.updated_at,
  c.is_deleted,
  cp.slot_pinout_json AS slots_pinout_json
FROM
  controllers c
  LEFT JOIN controller_types ct ON c.controller_types_id = ct.id
  LEFT JOIN projects p ON c.projects_id = p.id
  LEFT JOIN controller_pcb_hw_versions pcbv ON c.controllers_pcb_hw_versions_id = pcbv.id
  LEFT JOIN manufacturers m ON c.manufacturers_id = m.id
  LEFT JOIN mini_pcie_modules mpcie ON c.mini_pcie_modules_id = mpcie.id
  LEFT JOIN m2_modules_types m2t ON c.m2_modules_types_id = m2t.id
  LEFT JOIN can_termination_confs ctc ON c.can_termination_confs_id = ctc.id
  LEFT JOIN controller_pcb_hw_versions_rev pcbrev ON pcbv.revision = pcbrev.revision
  LEFT JOIN mini_pcie_modules_type mpt ON mpcie.mini_pcie_modules_type_id = mpt.id
  LEFT JOIN controllers_pinout cp 
    ON ct.id = cp.controller_type_id 
    AND pcbv.version_number = cp.controller_pcb_hw_versions_number 
    AND COALESCE(pcbrev.revision, '') = cp.controller_pcb_hw_versions_revision
`

type GetAllControllersRow struct {
	ID                   uuid.UUID             `json:"id"`
	ControllerTypeName   sql.NullString        `json:"controller_type_name"`
	IoModuleSocketAmount sql.NullInt32         `json:"io_module_socket_amount"`
	ProjectName          sql.NullString        `json:"project_name"`
	Description          sql.NullString        `json:"description"`
	PcbHwVersion         interface{}           `json:"pcb_hw_version"`
	PcbVersionNumber     sql.NullInt32         `json:"pcb_version_number"`
	SerialNumber         sql.NullString        `json:"serial_number"`
	ManufacturerName     sql.NullString        `json:"manufacturer_name"`
	AssemblyDate         sql.NullTime          `json:"assembly_date"`
	MacAddress           sql.NullString        `json:"mac_address"`
	SimNumber            sql.NullString        `json:"sim_number"`
	MiniPcieModulesName  sql.NullString        `json:"mini_pcie_modules_name"`
	MiniPcieSerialNumber sql.NullString        `json:"mini_pcie_serial_number"`
	M2ModuleName         sql.NullString        `json:"m2_module_name"`
	M2ModuleTypeNumber   sql.NullInt32         `json:"m2_module_type_number"`
	DisplayAdaptersID    uuid.NullUUID         `json:"display_adapters_id"`
	ArticleNumber        sql.NullString        `json:"article_number"`
	QrCode               sql.NullString        `json:"qr_code"`
	Can1                 sql.NullBool          `json:"can_1"`
	Can2                 sql.NullBool          `json:"can_2"`
	Can3                 sql.NullBool          `json:"can_3"`
	Can4                 sql.NullBool          `json:"can_4"`
	Usb                  sql.NullBool          `json:"usb"`
	Serial               sql.NullBool          `json:"serial"`
	ManufacturerQrCode   sql.NullString        `json:"manufacturer_qr_code"`
	OrderID              uuid.NullUUID         `json:"order_id"`
	CreatedAt            sql.NullTime          `json:"created_at"`
	UpdatedAt            sql.NullTime          `json:"updated_at"`
	IsDeleted            sql.NullBool          `json:"is_deleted"`
	SlotsPinoutJson      pqtype.NullRawMessage `json:"slots_pinout_json"`
}

func (q *Queries) GetAllControllers(ctx context.Context) ([]GetAllControllersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllControllers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllControllersRow
	for rows.Next() {
		var i GetAllControllersRow
		if err := rows.Scan(
			&i.ID,
			&i.ControllerTypeName,
			&i.IoModuleSocketAmount,
			&i.ProjectName,
			&i.Description,
			&i.PcbHwVersion,
			&i.PcbVersionNumber,
			&i.SerialNumber,
			&i.ManufacturerName,
			&i.AssemblyDate,
			&i.MacAddress,
			&i.SimNumber,
			&i.MiniPcieModulesName,
			&i.MiniPcieSerialNumber,
			&i.M2ModuleName,
			&i.M2ModuleTypeNumber,
			&i.DisplayAdaptersID,
			&i.ArticleNumber,
			&i.QrCode,
			&i.Can1,
			&i.Can2,
			&i.Can3,
			&i.Can4,
			&i.Usb,
			&i.Serial,
			&i.ManufacturerQrCode,
			&i.OrderID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
			&i.SlotsPinoutJson,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getControllerById = `-- name: GetControllerById :one
SELECT
  c.id,
  ct.name AS controller_type_name,
  ct.io_module_slot_amount AS io_module_socket_amount,
  p.name AS project_name,
  c.description,
  concat(
    pcbv.version_number,
    pcbrev.revision
  ) AS pcb_hw_version,
  c.pcb_version_number,
  c.serial_number,
  m.name AS manufacturer_name,
  c.assembly_date,
  c.mac_address,
  c.sim_number,
  mpt.name AS mini_pcie_modules_name,
  mpcie.serial_number AS mini_pcie_serial_number,
  m2t.name AS m2_module_name,
  m2t.module_type_number AS m2_module_type_number,
  c.display_adapters_id,
  c.article_number,
  c.qr_code,
  ctc.can_1,
  ctc.can_2,
  ctc.can_3,
  ctc.can_4,
  c.usb,
  c.serial,
  c.manufacturer_qr_code,
  c.order_id,
  c.created_at,
  c.updated_at,
  c.is_deleted,
  cp.slot_pinout_json AS slots_pinout_json
FROM
  controllers c
  LEFT JOIN controller_types ct ON c.controller_types_id = ct.id
  LEFT JOIN projects p ON c.projects_id = p.id
  LEFT JOIN controller_pcb_hw_versions pcbv ON c.controllers_pcb_hw_versions_id = pcbv.id
  LEFT JOIN manufacturers m ON c.manufacturers_id = m.id
  LEFT JOIN mini_pcie_modules mpcie ON c.mini_pcie_modules_id = mpcie.id
  LEFT JOIN m2_modules_types m2t ON c.m2_modules_types_id = m2t.id
  LEFT JOIN can_termination_confs ctc ON c.can_termination_confs_id = ctc.id
  LEFT JOIN controller_pcb_hw_versions_rev pcbrev ON pcbv.revision = pcbrev.revision
  LEFT JOIN mini_pcie_modules_type mpt ON mpcie.mini_pcie_modules_type_id = mpt.id
  LEFT JOIN controllers_pinout cp 
    ON ct.id = cp.controller_type_id 
    AND pcbv.version_number = cp.controller_pcb_hw_versions_number 
    AND COALESCE(pcbrev.revision, '') = cp.controller_pcb_hw_versions_revision
WHERE
  c.id = $1
`

type GetControllerByIdRow struct {
	ID                   uuid.UUID             `json:"id"`
	ControllerTypeName   sql.NullString        `json:"controller_type_name"`
	IoModuleSocketAmount sql.NullInt32         `json:"io_module_socket_amount"`
	ProjectName          sql.NullString        `json:"project_name"`
	Description          sql.NullString        `json:"description"`
	PcbHwVersion         interface{}           `json:"pcb_hw_version"`
	PcbVersionNumber     sql.NullInt32         `json:"pcb_version_number"`
	SerialNumber         sql.NullString        `json:"serial_number"`
	ManufacturerName     sql.NullString        `json:"manufacturer_name"`
	AssemblyDate         sql.NullTime          `json:"assembly_date"`
	MacAddress           sql.NullString        `json:"mac_address"`
	SimNumber            sql.NullString        `json:"sim_number"`
	MiniPcieModulesName  sql.NullString        `json:"mini_pcie_modules_name"`
	MiniPcieSerialNumber sql.NullString        `json:"mini_pcie_serial_number"`
	M2ModuleName         sql.NullString        `json:"m2_module_name"`
	M2ModuleTypeNumber   sql.NullInt32         `json:"m2_module_type_number"`
	DisplayAdaptersID    uuid.NullUUID         `json:"display_adapters_id"`
	ArticleNumber        sql.NullString        `json:"article_number"`
	QrCode               sql.NullString        `json:"qr_code"`
	Can1                 sql.NullBool          `json:"can_1"`
	Can2                 sql.NullBool          `json:"can_2"`
	Can3                 sql.NullBool          `json:"can_3"`
	Can4                 sql.NullBool          `json:"can_4"`
	Usb                  sql.NullBool          `json:"usb"`
	Serial               sql.NullBool          `json:"serial"`
	ManufacturerQrCode   sql.NullString        `json:"manufacturer_qr_code"`
	OrderID              uuid.NullUUID         `json:"order_id"`
	CreatedAt            sql.NullTime          `json:"created_at"`
	UpdatedAt            sql.NullTime          `json:"updated_at"`
	IsDeleted            sql.NullBool          `json:"is_deleted"`
	SlotsPinoutJson      pqtype.NullRawMessage `json:"slots_pinout_json"`
}

func (q *Queries) GetControllerById(ctx context.Context, id uuid.UUID) (GetControllerByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getControllerById, id)
	var i GetControllerByIdRow
	err := row.Scan(
		&i.ID,
		&i.ControllerTypeName,
		&i.IoModuleSocketAmount,
		&i.ProjectName,
		&i.Description,
		&i.PcbHwVersion,
		&i.PcbVersionNumber,
		&i.SerialNumber,
		&i.ManufacturerName,
		&i.AssemblyDate,
		&i.MacAddress,
		&i.SimNumber,
		&i.MiniPcieModulesName,
		&i.MiniPcieSerialNumber,
		&i.M2ModuleName,
		&i.M2ModuleTypeNumber,
		&i.DisplayAdaptersID,
		&i.ArticleNumber,
		&i.QrCode,
		&i.Can1,
		&i.Can2,
		&i.Can3,
		&i.Can4,
		&i.Usb,
		&i.Serial,
		&i.ManufacturerQrCode,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.SlotsPinoutJson,
	)
	return i, err
}
